plugins:
  - serverless-api-gateway-caching

service: artilleryTesting

custom:
  apiGatewayCaching:
    enabled: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: test
  region: us-east-1
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - "Fn::GetAtt": [ OnDemandTableTest, Arn ]
      - "Fn::GetAtt": [ ProvisionedTableTest, Arn ]
  - Effect: Allow
    Action:
      - dax:*
    Resource: !GetAtt DAXCluster.Arn
  - Effect: Allow
    Action:
      - sqs:SendMessage
    Resource: !GetAtt SQSQueue.Arn

   
functions:
  mock: #API Gateway Mock
    handler: handler.mock
    events:
      - http:
          path: mock
          cors: true
          method: get
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 200}'
          response:
            template: "Hello World Mock"
            statusCodes:
              200:
                pattern: ''

  vanillaHelloWorld: #API Gateway -> Lambda (responde “Hello World”)
    handler: vanilla.handler
    events:
      - http:
          path: vanilla
          cors: true
          method: get
          
  goldenHelloWorld: #API Gateway -> Lambda (con Golden API, responde “Hello World!”)
    handler: goldenhw.handler
    events:
      - http: 
          path: goldenhw
          method: get

  goldenHelloWorldLatency: #API Gateway -> Lambda (con Golden API, invoca un servicio http - 100% estable pero con latencia de 2000ms)
    handler: goldenhwlat.handler
    events:
      - http: 
          path: goldenhwlat
          method: get

# Deberia ser Golden?
  vanillaCachedHelloWorld: #API Gateway (con Caché activado) -> Lambda (responde “Hello World”)
    handler: vanillaCached.handler
    events:
      - http:
          path: vanillaCached
          cors: true
          method: get
          caching:
            enabled: true

  vanillaAuthorizer: #API Gateway (con el Authorizer de Shared Services) -> Lambda
    handler: vanillaAuthorizer.handler
    events:
      - http:
          path: vanillaAuthorizer
          method: get
          authorizer: 
            name: authorizerFunction
            type: request
            identitySource: method.request.querystring.authorization
  
  authorizerFunction:
    handler: authorizerFunc.handler
    
  vanillaDynamoOD: #API Gateway -> Lambda -> DynamoDB (Default Capacity)
    handler: vanillaDynamoProv.handler
    events:
      - http:
          path: vanillaDynamoProv
          method: get

  vanillaDynamoProv: #API Gateway -> Lambda -> DynamoDB (On - Demand Capacity)
    handler: vanillaDynamoOD.handler
    events:
      - http:
          path: vanillaDynamoOD
          method: get

  vanillaDynamoDAX: #API Gateway -> Lambda -> Dynamo (con caché DAX)
    handler: vanillaDynamoDAX.handler
    environment:
      DAX_ENDPOINT: { Fn::GetAtt: [DAXCluster, ClusterDiscoveryEndpoint] }
    vpc:
    securityGroupIds:
      - Fn::GetAtt: [DAXSecurityGroup, GroupId]
    subnetIds:
      - Ref: DAXSubnet
    events:
      - http:
          path: vanillaDynamoDAX
          method: get

  vanillaSQS: #API Gateway -> Lambda -> SQS
    handler: vanillaSQS.handler
    events:
      - http:
          path: vanillaSQS
          method: get
#y VPC lambdas?

resources:
  Resources:
    OnDemandTableTest:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OnDemandTableTest
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    ProvisionedTableTest:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProvisionedTableTest
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    DAXCluster:
      Type: AWS::DAX::Cluster
      Properties:
        ClusterName: daxcluster
        Description: Dax Cluster 
        IAMRoleARN: !GetAtt DAXRole.Arn
        NodeType: dax.t2.small
        ReplicationFactor: 1
        SecurityGroupIds: 
          - !GetAtt DAXSecurityGroup.GroupId
        SubnetGroupName: !Ref DAXSubnetGroup

    DAXRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action:
              - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                - dax.amazonaws.com
          Version: '2012-10-17'
        RoleName: DAXRoleForTesting
        Policies:
          -
            PolicyName: DAXAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Resource: '*'
                  Action:
                    - 'dynamodb:DescribeTable'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Query'
                    - 'dynamodb:Scan'

    DAXSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for DAX
        GroupName: DAX SG
        VpcId: !Ref DAXVPC
  
    DAXSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: DAXSecurityGroup
      Properties:
        GroupId: !GetAtt DAXSecurityGroup.GroupId
        IpProtocol: tcp
        FromPort: 8111
        ToPort: 8111
        SourceSecurityGroupId: !GetAtt DAXSecurityGroup.GroupId
    
    DAXVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: default
        Tags:
          - Key: Name
            Value: DAXTest

    DAXSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ''
        CidrBlock: 10.0.0.0/20
        Tags:
          - Key: Name
            Value: DAXTest
        VpcId: !Ref DAXVPC
    
    DAXSubnetGroup:
      Type: AWS::DAX::SubnetGroup
      Properties:
        Description: Subnet group for DAX Test
        SubnetGroupName: DAXTestGN
        SubnetIds: 
          - !Ref DAXSubnet

    SQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "SQSQueue"